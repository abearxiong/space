{"version":3,"sources":["webpack://type-tools/./src/index.scss?0c9d","webpack://type-tools/./src/pages/trans-swagger/route.tsx","webpack://type-tools/./src/App.tsx","webpack://type-tools/./src/serviceWorker.ts","webpack://type-tools/./src/index.tsx","webpack://type-tools/./src/index.scss"],"names":["options","TransSwaggerRoute","path","name","component","lazy","message","maxCount","history","locale","value","manual","throwOnError","Suspense","fallback","render","status","title","subTitle","extra","type","onClick","push","Boolean","window","location","hostname","match","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","___CSS_LOADER_EXPORT___","module","id"],"mappings":"sKAGIA,EAAU,CAEd,OAAiB,OACjB,WAAoB,GAEP,IAAI,IAASA,GAIX,W,2FCVTC,G,gBAAyB,CAC7BC,KAAM,IACNC,KAAM,cACNC,WAAW,IAAAC,OAAK,kBAAM,+F,UCUxBC,EAAA,UAAe,CACbC,SAAU,IAyCZ,QAvCA,WACE,IAAMC,GAAU,UAChB,OACE,qBAAe,CAACC,OAAQ,KACtB,gBAAC,KAAkB,CACjBC,MAAO,CACLC,QAAQ,EACRC,cAAc,IAGhB,gBAAC,KAAM,KACL,gBAAC,EAAAC,SAAQ,CAACC,SAAU,sCAClB,gBAAC,KAAM,KACL,gBAAC,KAAK,CACJZ,KAAMD,EAAkBC,KACxBE,UAAWH,EAAkBG,YAE/B,gBAAC,KAAK,CACJW,OAAQ,kBACN,gBAAC,KAAM,CACLC,OAAO,MACPC,MAAM,MACNC,SAAS,iBACTC,MACE,oBAAO,CAACC,KAAK,UAAUC,QAAS,kBAAMb,EAAQc,KAAK,OAAI,mB,uDC9BzDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPN,SAAgB,gBAAC,EAAG,MAAKC,SAASC,eAAe,SDgI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,Q,8EE7IVC,E,MAA0B,GAA4B,KAE1DA,EAAwBhB,KAAK,CAACiB,EAAOC,GAAI,yTAA4U,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,4BAA4B,MAAQ,GAAG,SAAW,kEAAkE,eAAiB,CAAC,+XAA+X,WAAa,MAEl6B,Y","file":"scripts/main.da78e.bundule.js","sourcesContent":["import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./index.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { lazy } from 'react';\n\nconst TransSwaggerRoute: any = {\n  path: '/',\n  name: '转化swagger数据',\n  component: lazy(() => import('./TransSwagger')),\n  // noMenu: true,\n};\n\nexport { TransSwaggerRoute };\n","import React, { Suspense } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useHistory,\n} from 'react-router-dom';\n\nimport { ConfigProvider, message } from 'antd';\nimport zhCN from 'antd/es/locale/zh_CN';\nimport { UseRequestProvider } from 'ahooks';\nimport { TransSwaggerRoute } from './pages/trans-swagger/index';\nimport Result from 'antd/lib/result';\nimport { Button } from 'antd';\n// message 提示\nmessage.config({\n  maxCount: 1,\n});\nfunction App() {\n  const history = useHistory();\n  return (\n    <ConfigProvider locale={zhCN}>\n      <UseRequestProvider\n        value={{\n          manual: true,\n          throwOnError: true,\n        }}\n      >\n        <Router>\n          <Suspense fallback={<div>加载中...</div>}>\n            <Switch>\n              <Route\n                path={TransSwaggerRoute.path}\n                component={TransSwaggerRoute.component}\n              />\n              <Route\n                render={() => (\n                  <Result\n                    status='404'\n                    title='404'\n                    subTitle='对不起，您访问的页面不存在。'\n                    extra={\n                      <Button type='primary' onClick={() => history.push('/')}>\n                        返回首页\n                      </Button>\n                    }\n                  />\n                )}\n              />\n            </Switch>\n          </Suspense>\n        </Router>\n      </UseRequestProvider>\n    </ConfigProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      // process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// for observer batching\nimport 'antd/dist/antd.css';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// <React.StrictMode>\n//   <App />\n// </React.StrictMode>\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body{margin:0;font-family:-apple-system,BlinkMacSystemFont,\\\"Segoe UI\\\",\\\"Roboto\\\",\\\"Oxygen\\\",\\\"Ubuntu\\\",\\\"Cantarell\\\",\\\"Fira Sans\\\",\\\"Droid Sans\\\",\\\"Helvetica Neue\\\",sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}code{font-family:source-code-pro,Menlo,Monaco,Consolas,\\\"Courier New\\\",monospace}\", \"\",{\"version\":3,\"sources\":[\"webpack://src/index.scss\"],\"names\":[],\"mappings\":\"AAAA,KACE,QAAA,CACA,mJAAA,CAGA,kCAAA,CACA,iCAAA,CAGF,KACE,yEAAA\",\"sourcesContent\":[\"body {\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\\n    monospace;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n"],"sourceRoot":""}