{"version":3,"sources":["webpack://space/C:\\Users\\runing\\code\\github\\test-think-space\\index.js","webpack://space/./src/pages/user/Login/Login.tsx"],"names":["GithubToken","options","authorizeUrl","scope","accessTokenUrl","client_id","client_secret","proxyUrl","queryUrl","useQueryUrl","XSPACE","TOKEN","ACCESS_TOKEN","login","location","href","setItem","key","value","localStorage","removeItem","getQueryVariable","variable","query","window","search","substring","undefined","vars","split","i","length","pair","saveToken","accessToken","test","alert","removeToken","getToken","getItem","async","postCode","code","data","res","fetch","method","body","JSON","stringify","headers","mode","text","postCodeCors","postCodeEnd","isNext","hasToken","next","logout","auto","Promise","resolve","Login","userStore","match","client_id_local","then","console","log","onClick"],"mappings":"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","file":"scripts/420.f9158.bundule.js","sourcesContent":["// xx-space-local-dev\nfunction GithubToken(options = {}) {\n  let authorizeUrl = \"https://github.com/login/oauth/authorize\";\n  let scope = \"user\"\n  let accessTokenUrl = \"https://github.com/login/oauth/access_token\";\n  let client_id = \"6d1f0f1a67b21e729050\";\n  let client_secret = \"22cbbe70c70edb70097236f0b8e51c46b8ac460e\";\n  let proxyUrl = \"http://message.xiongxiao.me/cors/\";\n  let queryUrl = \"http://message.xiongxiao.me/api/gitThinkToken\";\n  let useQueryUrl = false;\n  function init() {\n    if (options.authorizeUrl) {\n      authorizeUrl = options.authorizeUrl;\n    }\n    if (options.scope) {\n      scope = options.scope;\n    }\n    if (options.accessTokenUrl) {\n      accessTokenUrl = options.accessTokenUrl;\n    }\n    if (options.client_id) {\n      client_id = options.client_id;\n    }\n    if (options.client_secret) {\n      client_secret = options.client_secret;\n    }\n    if (options.proxyUrl) {\n      proxyUrl = options.proxyUrl;\n    }\n    if (options.queryUrl) {\n      queryUrl = options.queryUrl;\n    }\n    if (options.useQueryUrl) {\n      useQueryUrl = options.useQueryUrl;\n    }\n  }\n  // 初始化\n  init();\n  const XSPACE = \"xx-space-\";\n  const TOKEN = \"token\";\n  const ACCESS_TOKEN = \"access_token\";\n  function login() {\n    location.href = authorizeUrl + \"?\" + `client_id=${client_id}` + `&scope=${scope}`;\n  }\n  function setItem(key, value) {\n    localStorage.setItem(XSPACE + key, value);\n  }\n  function getItem(key) {\n    return localStorage.getItem(XSPACE + key);\n  }\n  function removeItem(key) {\n    localStorage.removeItem(XSPACE + key);\n  }\n  // 对象获取名字\n  function getKeyName(kv) {\n    for (let i in kv) {\n      return i;\n    }\n    return false;\n  }\n  function getQueryVariable(variable, queryUrl) {\n    var query = window.location.search.substring(1);\n    if (queryUrl != undefined) {\n      query = queryUrl;\n    }\n    var vars = query.split(\"&\");\n    for (var i = 0; i < vars.length; i++) {\n      var pair = vars[i].split(\"=\");\n      if (pair[0] == variable) {\n        return pair[1];\n      }\n    }\n    return false;\n  }\n  function saveToken(accessToken) {\n    // 返回token的例子\n    // \"access_token=fabc48079ffb6bdb5b0a9dce9bbb8f149af0fb0b&scope=public_repo&token_type=bearer\"\n    let isAccessToken = /access_token/.test(accessToken);\n    if (!isAccessToken) {\n      alert(\"登录错误\");\n      console.error(accessToken);\n      removeToken();\n      return;\n    }\n    setItem(ACCESS_TOKEN, accessToken);\n    setItem(TOKEN, getQueryVariable(\"access_token\", accessToken));\n  }\n  function removeToken() {\n    removeItem(ACCESS_TOKEN);\n    removeItem(TOKEN);\n  }\n  function getToken() {\n    return getItem(TOKEN);\n  }\n  async function postCode() {\n    if(client_secret && !useQueryUrl) {\n      return postCodeCors();\n    } else {\n      return postCodeEnd();\n    }\n  }\n  async function postCodeCors() {\n    let code = getQueryVariable(\"code\");\n    let data = { client_id, client_secret, code };\n    if (code) {\n      const res = await fetch(proxyUrl + accessTokenUrl, {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n        mode: \"cors\",\n      });\n      const text = await res.text();\n      saveToken(text);\n      return getToken();\n    }\n  }\n  // 因为client_secret 使用代理不好，所以优化方法，得到token，后端服务器请求数据\n  async function postCodeEnd() {\n    let code = getQueryVariable(\"code\");\n    let data = { client_id, client_secret, code };\n    if (code) {\n      const res = await fetch(queryUrl, {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n        mode: \"cors\",\n      });\n      const text = await res.text();\n      saveToken(text);\n      return getToken();\n    }\n  }\n  function isNext() {\n    return !!getQueryVariable(\"code\");\n  }\n  function hasToken() {\n    return !!getToken();\n  }\n  function auto() {\n    if (hasToken()) {\n      return Promise.resolve(getToken());\n    }\n    if (isNext()) {\n      let nt = postCode();\n      return nt;\n    } else {\n      login();\n      return Promise.resolve(\"登录页面\");\n    }\n  }\n  return {\n    login: login,\n    isNext: isNext,\n    next: postCode,\n    getToken: getToken,\n    hasToken: hasToken,\n    logout: removeToken,\n    auto: auto,\n  };\n}\nexport { GithubToken };\n\nexport default GithubToken;\n","import { useStores } from '@/hooks/user-stores';\nimport { useMount } from 'ahooks';\nimport { observer } from 'mobx-react';\nimport React from 'react';\nimport { GithubToken } from 'think-space-oauth';\nconst Login = observer(() => {\n  const { userStore } = useStores();\n  useMount(() => {\n    GithubToken({\n      proxyUrl: 'http://message.xiongxiao.me/cors/',\n    }).logout();\n    login();\n  });\n  function login() {\n    let client_id;\n    if (location.href.match(/localhost/)) {\n      client_id = userStore.client_id_local;\n    } else {\n      client_id = userStore.client_id;\n    }\n    GithubToken({\n      proxyUrl: 'http://message.xiongxiao.me/cors/',\n      client_id,\n    })\n      .auto()\n      .then(console.log);\n  }\n  window.login = login;\n\n  return (\n    <div>\n      登陆页面\n      <a onClick={login}>登录</a>\n    </div>\n  );\n});\n\nexport default Login;\n"],"sourceRoot":""}